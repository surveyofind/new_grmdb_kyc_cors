# Generated by Django 5.0.4 on 2024-06-06 10:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CorsAppCentreData',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('corsid', models.CharField(blank=True, max_length=100, null=True)),
                ('site_name', models.TextField(blank=True, null=True)),
                ('site_code', models.TextField(blank=True, null=True)),
                ('coordinates_of_sites_dms_lat', models.TextField(blank=True, null=True)),
                ('coordinates_of_sites_dms_long', models.TextField(blank=True, null=True)),
                ('coordinates_of_sites_dms_elp_height', models.TextField(blank=True, null=True)),
                ('digi_wr21_ip_dns_gateway_of_alloy_field', models.TextField(blank=True, null=True)),
                ('digi_username_password', models.TextField(blank=True, null=True)),
                ('alloy_cc_network_ip', models.TextField(blank=True, null=True)),
                ('alloy_netmask', models.TextField(blank=True, null=True)),
                ('alloy_local_wifi_ip', models.TextField(blank=True, null=True)),
                ('alloy_username_and_password', models.TextField(blank=True, null=True)),
                ('vendor_username', models.TextField(blank=True, null=True)),
                ('gdc_username', models.TextField(blank=True, null=True)),
                ('state', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cors_app_centre_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CorsAppCentreDataBackup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corsid', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.TextField(blank=True, null=True)),
                ('site_name', models.TextField(blank=True, null=True)),
                ('site_code', models.TextField(blank=True, null=True)),
                ('coordinates_of_sites_dms_lat', models.TextField(blank=True, null=True)),
                ('coordinates_of_sites_dms_long', models.TextField(blank=True, null=True)),
                ('coordinates_of_sites_dms_elp_height', models.TextField(blank=True, null=True)),
                ('digi_wr21_ip_dns_gateway_of_alloy_field', models.TextField(blank=True, null=True)),
                ('digi_username_password', models.TextField(blank=True, null=True)),
                ('alloy_cc_network_ip', models.TextField(blank=True, null=True)),
                ('alloy_netmask', models.TextField(blank=True, null=True)),
                ('alloy_local_wifi_ip', models.TextField(blank=True, null=True)),
                ('alloy_username_and_password', models.TextField(blank=True, null=True)),
                ('vendor_username', models.TextField(blank=True, null=True)),
                ('gdc_username', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cors_app_centre_data_backup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CorsAppGdcData',
            fields=[
                ('gdcid', models.AutoField(primary_key=True, serialize=False)),
                ('corsid', models.CharField(blank=True, max_length=100, null=True)),
                ('site_name', models.TextField(blank=True, null=True)),
                ('state_name', models.TextField(blank=True, null=True)),
                ('dist_name', models.TextField(blank=True, null=True)),
                ('tahsil_name', models.TextField(blank=True, null=True)),
                ('pin_code', models.CharField(blank=True, max_length=100, null=True)),
                ('gdc_name', models.TextField(blank=True, null=True)),
                ('person_of_gdc', models.TextField(blank=True, null=True)),
                ('contact_no_of_gdc', models.TextField(blank=True, null=True)),
                ('last_date_of_gdc_visit', models.TextField(blank=True, null=True)),
                ('remark', models.TextField(blank=True, null=True)),
                ('image_east', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('image_west', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('image_north', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('image_south', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('id', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'cors_app_gdc_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CorsAppGdcDataBackup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corsid', models.CharField(blank=True, max_length=100, null=True)),
                ('site_name', models.TextField(blank=True, null=True)),
                ('state_name', models.TextField(blank=True, null=True)),
                ('dist_name', models.TextField(blank=True, null=True)),
                ('tahsil_name', models.TextField(blank=True, null=True)),
                ('pin_code', models.CharField(blank=True, max_length=100, null=True)),
                ('gdc_name', models.TextField(blank=True, null=True)),
                ('person_of_gdc', models.TextField(blank=True, null=True)),
                ('contact_no_of_gdc', models.TextField(blank=True, null=True)),
                ('last_date_of_gdc_visit', models.TextField(blank=True, null=True)),
                ('remark', models.TextField(blank=True, null=True)),
                ('image_east', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('image_west', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('image_north', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('image_south', models.FileField(blank=True, null=True, upload_to='uploads/')),
            ],
            options={
                'db_table': 'cors_app_gdc_data_backup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CorsAppVendorData',
            fields=[
                ('vendorid', models.AutoField(primary_key=True, serialize=False)),
                ('corsid', models.CharField(blank=True, max_length=100, null=True)),
                ('state_name', models.CharField(blank=True, max_length=100, null=True)),
                ('site_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_date_of_site_visit', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_installation', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_monumentation', models.CharField(blank=True, max_length=100, null=True)),
                ('station_status', models.CharField(blank=True, max_length=100, null=True)),
                ('dimension_of_pillar', models.CharField(blank=True, max_length=100, null=True)),
                ('height_of_bottom_of_antenna_from_base_of_pillar', models.CharField(blank=True, max_length=100, null=True)),
                ('height_of_bottom_of_antenna_from_top_of_base_plate', models.CharField(blank=True, max_length=100, null=True)),
                ('height_of_bottom_of_antenna_from_solar_panel_lower_angle_bottom', models.CharField(blank=True, max_length=100, null=True)),
                ('dimension_of_pedestal', models.CharField(blank=True, max_length=100, null=True)),
                ('electricity_provider', models.CharField(blank=True, max_length=100, null=True)),
                ('electricity_meter_no', models.CharField(blank=True, max_length=100, null=True)),
                ('twonumber_of_solar_panels', models.CharField(blank=True, max_length=100, null=True)),
                ('capacity_of_solar_panel', models.CharField(blank=True, max_length=100, null=True)),
                ('serial_no_of_solar_panels1and2', models.CharField(blank=True, max_length=100, null=True)),
                ('batteries_12v_2', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name_and_no_of_batteries', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name_of_sim1', models.CharField(blank=True, max_length=100, null=True)),
                ('sim1_plan_validity_and_sim1_no', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name_of_sim2', models.CharField(blank=True, max_length=100, null=True)),
                ('sim2_plan_validity_and_sim2_no', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name_and_no_of_broadband', models.CharField(blank=True, max_length=100, null=True)),
                ('broadband_plan_validity', models.CharField(blank=True, max_length=100, null=True)),
                ('antenna_type_and_serial_no', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_installation_of_antenna', models.CharField(blank=True, max_length=100, null=True)),
                ('offset_parameter_of_antenna', models.FileField(blank=True, null=True, upload_to='image/')),
                ('receiver_model_name_and_serial_no', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_installation_of_receiver_and_firmware', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_installation_of_radome_and_serial_no', models.CharField(blank=True, max_length=100, null=True)),
                ('serial_no_of_meteorological_sensor', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_installation_of_meteorological_sensor', models.CharField(blank=True, max_length=100, null=True)),
                ('meteorological_sensor_type_and_firmware', models.CharField(blank=True, max_length=100, null=True)),
                ('logging_interval_of_gnss_data', models.CharField(blank=True, max_length=100, null=True)),
                ('gnss_data_frequencies', models.CharField(blank=True, max_length=100, null=True)),
                ('vendor_time', models.TextField(blank=True, db_column='vendor time', null=True)),
                ('image_east', models.FileField(blank=True, null=True, upload_to='image/')),
                ('image_west', models.FileField(blank=True, null=True, upload_to='image/')),
                ('image_north', models.FileField(blank=True, null=True, upload_to='image/')),
                ('image_south', models.FileField(blank=True, null=True, upload_to='image/')),
                ('operationmaintainanceremark', models.CharField(blank=True, max_length=100, null=True)),
                ('id', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'cors_app_vendor_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CorsAppVendorDataBackup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendorid', models.IntegerField(blank=True, null=True)),
                ('corsid', models.CharField(blank=True, max_length=100, null=True)),
                ('state_name', models.CharField(blank=True, max_length=100, null=True)),
                ('site_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_date_of_site_visit', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_installation', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_monumentation', models.CharField(blank=True, max_length=100, null=True)),
                ('station_status', models.CharField(blank=True, max_length=100, null=True)),
                ('dimension_of_pillar', models.CharField(blank=True, max_length=100, null=True)),
                ('height_of_bottom_of_antenna_from_base_of_pillar', models.CharField(blank=True, max_length=100, null=True)),
                ('height_of_bottom_of_antenna_from_top_of_base_plate', models.CharField(blank=True, max_length=100, null=True)),
                ('height_of_bottom_of_antenna_from_solar_panel_lower_angle_bottom', models.CharField(blank=True, max_length=100, null=True)),
                ('dimension_of_pedestal', models.CharField(blank=True, max_length=100, null=True)),
                ('electricity_provider', models.CharField(blank=True, max_length=100, null=True)),
                ('electricity_meter_no', models.CharField(blank=True, max_length=100, null=True)),
                ('twonumber_of_solar_panels', models.CharField(blank=True, max_length=100, null=True)),
                ('capacity_of_solar_panel', models.CharField(blank=True, max_length=100, null=True)),
                ('serial_no_of_solar_panels1and2', models.CharField(blank=True, max_length=100, null=True)),
                ('batteries_12v_2', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name_and_no_of_batteries', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name_of_sim1', models.CharField(blank=True, max_length=100, null=True)),
                ('sim1_plan_validity_and_sim1_no', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name_of_sim2', models.CharField(blank=True, max_length=100, null=True)),
                ('sim2_plan_validity_and_sim2_no', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name_and_no_of_broadband', models.CharField(blank=True, max_length=100, null=True)),
                ('broadband_plan_validity', models.CharField(blank=True, max_length=100, null=True)),
                ('antenna_type_and_serial_no', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_installation_of_antenna', models.CharField(blank=True, max_length=100, null=True)),
                ('offset_parameter_of_antenna', models.CharField(blank=True, max_length=100, null=True)),
                ('receiver_model_name_and_serial_no', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_installation_of_receiver_and_firmware', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_installation_of_radome_and_serial_no', models.CharField(blank=True, max_length=100, null=True)),
                ('serial_no_of_meteorological_sensor', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_installation_of_meteorological_sensor', models.CharField(blank=True, max_length=100, null=True)),
                ('meteorological_sensor_type_and_firmware', models.CharField(blank=True, max_length=100, null=True)),
                ('logging_interval_of_gnss_data', models.CharField(blank=True, max_length=100, null=True)),
                ('gnss_data_frequencies', models.CharField(blank=True, max_length=100, null=True)),
                ('vendor_time', models.TextField(blank=True, db_column='vendor time', null=True)),
                ('image_east', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('image_west', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('image_north', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('image_south', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('operationmaintainanceremark', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'cors_app_vendor_data_backup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('controlcentre', models.BooleanField(default=False, verbose_name='control centre')),
                ('vendor', models.BooleanField(default=False, verbose_name='vendor')),
                ('gdc', models.BooleanField(default=False, verbose_name='gdc')),
                ('mobileno', models.CharField(max_length=10)),
                ('is_approved', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
